'use strict';

/**
 * This file serves as the pre-build step during Terrapin npm package builds.
 * 
 * Its only function is to clean the `integrity` fields from `package-lock.js` files, so that the build
 * can use Terrapin-built artifacts that might have different hashes.
 */

function visitDependencies(node, cb) {
	if (!node.hasOwnProperty("dependencies"))
		return;

	for (var depKey in node.dependencies) {
		var depNode = node.dependencies[depKey];
		visitDependencies(depNode, cb);
		cb(depNode);
	}
}

const fs = require('fs');

const lockFileName = 'package-lock.json';
//const packageFileName = 'package.json';
const integrityField = 'integrity';
//const privateField = 'private';

if (fs.existsSync(lockFileName)) {
	console.log(`Cleaning ${lockFileName} from all '${integrityField}' fields, to allow Terrapin-built artifacts to be consumed`);
	let lockFileText = fs.readFileSync(lockFileName);

	let lockData = JSON.parse(lockFileText);
	var i = 0;
	visitDependencies(lockData, function (dep) {
		if (dep[integrityField]) {
			++i;
			delete dep[integrityField];
		}
	});
	console.log(`Cleaned ${i} '${integrityField}' fields`);

	lockFileText = JSON.stringify(lockData, null, 2);
	fs.writeFileSync(lockFileName, lockFileText);
	console.log(`Wrote ${lockFileName}`);
}
else {
	console.log('Lock file not found');
}

/*if (fs.existsSync(packageFileName)) {
	console.log(`Removing '${privateField}' from ${packageFileName}, for the Terrapin build to be successful`);
	let packageFileText = fs.readFileSync(packageFileName);

	let packageData = JSON.parse(packageFileText);
	if (packageData[privateField]) {
		delete packageData[privateField];
	}

	console.log(`Removed '${privateField}' field from ${packageFileName}`);
	packageFileText = JSON.stringify(packageData, null, 2);
	fs.writeFileSync(packageFileName, packageFileText);
}
else {
	console.log(`${packageFileName} file not found`);
}*/
